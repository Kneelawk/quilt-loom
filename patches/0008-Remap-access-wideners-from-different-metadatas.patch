From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kneelawk <kneelawk@gmail.com>
Date: Mon, 16 May 2022 10:44:44 -0700
Subject: [PATCH] Remap access wideners from different metadatas


diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
index 6be97e04078c0765245e32bff1ce0d3ad569415f..abf26d07d6850a07f9759cdddc67e06a1665b076 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
@@ -27,7 +27,9 @@ package net.fabricmc.loom.configuration.accesswidener;
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
@@ -73,6 +75,33 @@ public record AccessWidenerFile(
 		);
 	}
 
+	public static List<AccessWidenerFile> allFromModJar(Map<String, ModMetadataHelper> helpers, MetadataConfig config, Path modJarPath) {
+		List<ModMetadataHelper.Metadata> metadataList = ModUtils.readAllMetadatasFromJar(helpers, config, modJarPath.toFile());
+
+		List<AccessWidenerFile> accessWidenerFiles = new ArrayList<>();
+
+		for (ModMetadataHelper.Metadata metadata : metadataList) {
+			String awPath = metadata.getAccessWidener();
+			String modId = metadata.getId();
+
+			if (awPath == null) {
+				continue;
+			}
+
+			byte[] content;
+
+			try {
+				content = ZipUtils.unpack(modJarPath, awPath);
+			} catch (IOException e) {
+				throw new UncheckedIOException("Could not find access widener file (%s) defined in the mod metadata file of %s".formatted(awPath, modJarPath.toAbsolutePath()), e);
+			}
+
+			accessWidenerFiles.add(new AccessWidenerFile(awPath, modId, content));
+		}
+
+		return accessWidenerFiles;
+	}
+
 	@Override
 	public int hashCode() {
 		int result = Objects.hash(path, modId);
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 297731ea7b53c714cc5ead10070fc83549bf198f..1f3d6f3643323d92ae025f7f2b49e34f66df7b5a 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -268,16 +268,18 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 		}
 
 		private void remapAccessWidener() throws IOException {
-			final AccessWidenerFile accessWidenerFile = AccessWidenerFile.fromModJar(getParameters().getMetadataHelpers().get(), getParameters().getMetadataConfig().get(), inputFile);
+			final List<AccessWidenerFile> accessWidenerFiles = AccessWidenerFile.allFromModJar(getParameters().getMetadataHelpers().get(), getParameters().getMetadataConfig().get(), inputFile);
 
-			if (accessWidenerFile == null) {
+			if (accessWidenerFiles.isEmpty()) {
 				return;
 			}
 
-			byte[] remapped = remapAccessWidener(accessWidenerFile.content());
+			for (AccessWidenerFile accessWidenerFile : accessWidenerFiles) {
+				byte[] remapped = remapAccessWidener(accessWidenerFile.content());
 
-			// Finally, replace the output with the remaped aw
-			ZipUtils.replace(outputFile, accessWidenerFile.path(), remapped);
+				// Finally, replace the output with the remaped aw
+				ZipUtils.replace(outputFile, accessWidenerFile.path(), remapped);
+			}
 		}
 
 		private byte[] remapAccessWidener(byte[] input) {
