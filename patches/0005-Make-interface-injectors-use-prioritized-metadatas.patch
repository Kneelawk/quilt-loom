From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kneelawk <kneelawk@gmail.com>
Date: Mon, 2 May 2022 18:03:45 -0700
Subject: [PATCH] Make interface injectors use prioritized metadatas


diff --git a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
index d7774eee52ffc86291c2822a2add17faf1535640..17a722a1362fc7de4b696b71e26f629719315390 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
@@ -42,6 +42,10 @@ import java.util.stream.Collectors;
 import com.google.common.base.Preconditions;
 import com.google.common.hash.Hasher;
 import com.google.common.hash.Hashing;
+
+import net.fabricmc.loom.api.metadata.MetadataConfig;
+import net.fabricmc.loom.util.ModUtils;
+
 import org.gradle.api.Project;
 import org.gradle.api.tasks.SourceSet;
 import org.objectweb.asm.ClassReader;
@@ -203,19 +207,16 @@ public class InterfaceInjectionProcessor implements JarProcessor, GenerateSource
 	}
 
 	private List<InjectedInterface> getSourceInjectedInterface(SourceSet sourceSet) {
-		final File metadataFile;
 		Map<String, ModMetadataHelper> helpers = extension.getModMetadataHelpers().get();
+		MetadataConfig config = extension.getMetadataConfig().get();
+		ModMetadataHelper.Metadata metadata = ModUtils.readMetadataFromSourceSet(helpers, config, sourceSet);
 
-		try {
-			metadataFile = sourceSet.getResources()
-					.matching(patternFilterable -> patternFilterable.include(helpers.keySet()))
-					.getSingleFile();
-		} catch (IllegalStateException e) {
-			// File not found
+		if (metadata == null) {
+			// No metadata file found
 			return Collections.emptyList();
 		}
 
-		return helpers.get(metadataFile.getName()).createMetadata(metadataFile).getInjectedInterfaces();
+		return metadata.getInjectedInterfaces();
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/util/ModUtils.java b/src/main/java/net/fabricmc/loom/util/ModUtils.java
index 1da236e9d5bebe10f511fb692a828e1067f72ec3..80db950a1ed9700dd690ea49187e298cc2418647 100644
--- a/src/main/java/net/fabricmc/loom/util/ModUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ModUtils.java
@@ -25,16 +25,23 @@
 package net.fabricmc.loom.util;
 
 import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.zip.ZipFile;
 
 import net.fabricmc.loom.api.LoomGradleExtensionAPI;
 import net.fabricmc.loom.api.metadata.MetadataConfig;
 import net.fabricmc.loom.configuration.ModMetadataHelper;
 
+import org.gradle.api.file.FileVisitDetails;
+import org.gradle.api.file.FileVisitor;
+import org.gradle.api.tasks.SourceSet;
+
 public final class ModUtils {
 	private ModUtils() {
 	}
@@ -92,6 +99,17 @@ public final class ModUtils {
 		}
 	}
 
+	public static ModMetadataHelper.Metadata readMetadataFromSourceSet(Map<String, ModMetadataHelper> helpers, MetadataConfig config, SourceSet sourceSet) {
+		SourceSetMetadataFinder finder = new SourceSetMetadataFinder(helpers.keySet(), config);
+		sourceSet.getResources().visit(finder);
+
+		if (finder.fileName == null) {
+			return null;
+		}
+
+		return helpers.get(finder.fileName).createMetadata(finder.file);
+	}
+
 	public static List<ModMetadataHelper.Metadata> readAllMetadatasFromJar(Map<String, ModMetadataHelper> helpers, MetadataConfig config, File jar) {
 		try (var zip = new ZipFile(jar)) {
 			return helpers.keySet()
@@ -109,4 +127,35 @@ public final class ModUtils {
 			throw new UnsupportedOperationException("Cannot read metadata in the jar.", e);
 		}
 	}
+
+	private static class SourceSetMetadataFinder implements FileVisitor {
+		private final Set<String> helperKeys;
+		private final MetadataConfig config;
+
+		String fileName = null;
+		File file = null;
+		private int curPriority = -1;
+
+		public SourceSetMetadataFinder(Set<String> helperKeys, MetadataConfig config) {
+			this.helperKeys = helperKeys;
+			this.config = config;
+		}
+
+		@Override
+		public void visitDir(FileVisitDetails dirDetails) {
+		}
+
+		@Override
+		public void visitFile(FileVisitDetails fileDetails) {
+			String path = fileDetails.getPath();
+			if (helperKeys.contains(path) && config.shouldProcess(path)) {
+				int newPriority = config.getPriority(path);
+				if (newPriority > curPriority) {
+					curPriority = newPriority;
+					fileName = path;
+					file = fileDetails.getFile();
+				}
+			}
+		}
+	}
 }
